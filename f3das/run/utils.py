'''
Created on 2020-09-17 19:10:47
Last modified on 2020-09-18 09:21:48

@author: L. F. Pereira (lfpereira@fe.up.pt))
'''

# imports

# standard library
import os
import pickle

# local library
import f3das
from f3das.utils.file_handling import get_unique_file_by_ext
from f3das.utils.file_handling import InfoReport


# object definition

def create_main_file(example_name, doe_variables, points, sim_info,
                     fixed_variables=None, additional_variables=None,
                     additional_info=None, pkl_filename='DoE.pkl'):
    '''
    Create file where all the information required to run simulations is
    contained.

    Parameters
    ----------
    example_name : str
        Folder name.
    doe_variables: dicts
        Variables of the DoE (generated by design of experiments) with lower
        and upper bounds.
    points: pandas.DataFrame
        Design of experiments points.
    sim_info : dict
        All the information required to create each simulation. In particular:
            * 'abstract_model': class that must be called inside the run model.
            * 'sim_info': OrderedDict with all the information required to
            instantiate a model (but that is not a model geometric or material
            variable)
            * 'transform_inputs': function that takes DoE point, fixed variables
            and additional variables and create a dictionary that is used as
            input of the model instance.
    fixed_variables : dict
        Model input variables that are kept fix during the design of experiments.
    additional_variables: dict
        Model input variables that change in each DoE but are not controlled by
        the design of experiments.
    additional_info : dict
        Information about the problem to store for later use.
    pkl_filename : str
        Name of main file.
    '''

    # create data dictionary with required information
    data = {'doe_variables': doe_variables,
            'points': points,
            'sim_info': sim_info,
            'run_info': {'missing_sims': list(range(len(points))),
                         'running_sims': [],
                         'error_sims': [],
                         'successful_sims': []},
            'version': f3das.__version__}

    # add facultative information
    if fixed_variables is not None:
        data['fixed_variables'] = fixed_variables
    if additional_variables is not None:
        data['additional_variables'] = additional_variables
    if additional_info is not None:
        data['additional_info'] = additional_info

    # create directory and save pkl file
    os.mkdir(example_name)
    with open(os.path.join(example_name, pkl_filename), 'wb') as file:
        pickle.dump(data, file)


def get_updated_sims_state(example_name, points, sims_dir_name='analyses'):
    '''
    Parameters
    ----------
    points : array
        If None, considers all created simulation folders.
    '''

    # initialization
    dir_path = os.path.join(example_name, sims_dir_name)

    # getting sims state
    error_sims = []
    successful_sims = []
    for point in points:
        folder_path = os.path.join(dir_path, 'DoE_point{}'.format(point))
        if not os.path.exists(folder_path):
            continue

        filename = get_unique_file_by_ext(folder_path, ext='.pkl')
        with open(os.path.join(folder_path, filename), 'rb') as file:
            data = pickle.load(file, encoding='latin1')
        success = data['success']

        if success:
            successful_sims.append(point)
        elif success is False:
            error_sims.append(point)

    return error_sims, successful_sims


def get_sims_info(example_name, pkl_filename='DoE.pkl',
                  sims_dir_name='analyses', print_info=True, report=''):

    # initialization
    info = InfoReport(sections=['run_info'])
    run_info_sec = info['run_info']

    # access data
    with open(os.path.join(example_name, pkl_filename), 'rb') as file:
        data = pickle.load(file)

    # running simulations
    running_sims = data['run_info']['running_sims']
    error_sims_, successful_sims_ = get_updated_sims_state(
        example_name, running_sims, sims_dir_name)
    n_running_sims = len(running_sims)
    n_running_sims_miss = len(list(set(running_sims) - set(error_sims_) - set(successful_sims_)))

    # other simulations
    n_missing_sims = len(data['run_info']['missing_sims']) + n_running_sims_miss
    n_error_sims = len(data['run_info']['error_sims']) + len(error_sims_)
    n_successful_sims = len(data['run_info']['successful_sims']) + len(successful_sims_)
    n_run = n_error_sims + n_successful_sims
    n_total = n_missing_sims + n_run

    # compute information
    if n_running_sims:
        run_info_sec.add_info(
            'Missing simulations (running): {}/{} ({:.1f}%)'.format(
                n_running_sims_miss, n_running_sims,
                n_running_sims_miss / n_running_sims * 100))
    run_info_sec.add_info('Missing simulations (total): {}/{} ({:.1f}%)'.format(
        n_missing_sims, n_total, n_missing_sims / n_total * 100))
    if n_run:
        run_info_sec.add_info('With errors: {}/{} ({:.1f}%)'.format(
            n_error_sims, n_run, n_error_sims / n_run * 100))
        run_info_sec.add_info('Successful: {}/{} ({:.1f}%)'.format(
            n_successful_sims, n_run, n_successful_sims / n_run * 100))

    # print information
    if print_info:
        info.print_info(print_headers=False)

    # create report
    if report:
        with open(report, 'w') as file:
            info.write_report(file, print_headers=False)

    return info


def update_run_info(example_name, pkl_filename='DoE.pkl',
                    sims_dir_name='analyses'):
    '''
    Updates information about simulations. Assumes simulations are not being
    ran. It is supposed to correct possible outdated files due to running of
    simulations in different machines.
    '''

    # access data
    with open(os.path.join(example_name, pkl_filename), 'rb') as file:
        data = pickle.load(file)

    # compute information
    points = list(range(len(data['points'])))
    error_sims, successful_sims = get_updated_sims_state(
        example_name, points, sims_dir_name)
    missing_sims = list(set(points) - set(error_sims) - set(successful_sims))

    # dump information
    data['run_info']['missing_sims'] = missing_sims
    data['run_info']['running_sims'] = []
    data['run_info']['error_sims'] = error_sims
    data['run_info']['successful_sims'] = successful_sims
    with open(os.path.join(example_name, pkl_filename), 'wb') as file:
        pickle.dump(data, file)
